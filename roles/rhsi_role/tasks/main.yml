---
- name: set up podman for the user
  become: true
  block:
    - name: copy setup_podman_user_service script to bastion
      ansible.builtin.copy:
        src: setup_podman_user_service
        dest: "/usr/bin/setup_podman_user_service"
        owner: root
        group: root
        mode: 0775
    - name: set up podman for the user
      ansible.builtin.blockinfile:
        dest: "/home/{{ student_name }}/.bashrc"
        insertafter: EOF
        marker: "# <!-- {mark} ANSIBLE MANAGED BLOCK (podman) -->"
        block: |
          loginctl enable-linger $USER
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
          /usr/bin/setup_podman_user_service


- name: install skupper cli
  become: true
  block:
    - name: install skupper cli
      become_user: "{{ student_name }}"
      ansible.builtin.shell: >-
        /usr/bin/curl https://skupper.io/install.sh | sh -s -- --version 2.0.0-preview-2
    - name: export skupper bash variable
      ansible.builtin.blockinfile:
        path: /etc/profile
        marker: "# skupper platform variabler"
        block: "export SKUPPER_PLATFORM=podman"
    - name: loginctl enable-linger
      ansible.builtin.command:
        argv:
          - loginctl
          - enable-linger
          - "{{ student_name }}"
    # - name: switch skupper platform
    #   become_user: "{{ student_name }}"
    #   ansible.builtin.command: "/home/{{ student_name }}/.local/bin/skupper switch"
      
    - name: Start MySQL container with Podman if not running
      become: true
      become_user: "{{ student_name }}"
      containers.podman.podman_container:
        name: "{{workload_container_name}}"
        image: "{{workload_app_image}}"
        state: started
        restart_policy: always
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: "{{workload_mysql_password}}"
        command: "--default-authentication-plugin=mysql_native_password"
      register: container_result
      failed_when: container_result.failed
      # ignore_errors: yes  # Ignore errors to proceed with container info check


    - name: Wait for the container to start (optional)
      wait_for:
        host: localhost
        port: 3306
        delay: 5
        timeout: 30

    - name: Verify travels-mysqldb container is running
      containers.podman.podman_container_info:
        name: travels-mysqldb
      register: container_info
      retries: 3
      delay: 5
